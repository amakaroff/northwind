// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.northwind.application.web;

import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.northwind.application.web.SolidProductsItemJsonController;
import org.northwind.model.SolidProduct;
import org.northwind.service.api.SolidProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect SolidProductsItemJsonController_Roo_JSON {
    
    declare @type: SolidProductsItemJsonController: @RestController;
    
    declare @type: SolidProductsItemJsonController: @RequestMapping(value = "/api/solidproducts/{solidProduct}", name = "SolidProductsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param solidProductService
     */
    @Autowired
    public SolidProductsItemJsonController.new(SolidProductService solidProductService) {
        this.solidProductService = solidProductService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return SolidProduct
     */
    @ModelAttribute
    public SolidProduct SolidProductsItemJsonController.getSolidProduct(@PathVariable("solidProduct") Long id) {
        SolidProduct solidProduct = solidProductService.findOne(id);
        if (solidProduct == null) {
            throw new NotFoundException(String.format("SolidProduct with identifier '%s' not found",id));
        }
        return solidProduct;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param solidProduct
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> SolidProductsItemJsonController.show(@ModelAttribute SolidProduct solidProduct) {
        return ResponseEntity.ok(solidProduct);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param solidProduct
     * @return UriComponents
     */
    public static UriComponents SolidProductsItemJsonController.showURI(SolidProduct solidProduct) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(SolidProductsItemJsonController.class).show(solidProduct))
            .buildAndExpand(solidProduct.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedSolidProduct
     * @param solidProduct
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> SolidProductsItemJsonController.update(@ModelAttribute SolidProduct storedSolidProduct, @Valid @RequestBody SolidProduct solidProduct, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        solidProduct.setId(storedSolidProduct.getId());
        getSolidProductService().save(solidProduct);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param solidProduct
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> SolidProductsItemJsonController.delete(@ModelAttribute SolidProduct solidProduct) {
        getSolidProductService().delete(solidProduct);
        return ResponseEntity.ok().build();
    }
    
}
